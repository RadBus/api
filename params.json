{"name":"RadBus Web API","tagline":"REST API Documentaion","body":"The RabBus Web API enables applications to obtain upcoming Twin Cities Metro Transit departure information for users with configured route schedules.  The most practical use case is when an end user has multiple transit route/stop options and needs to make a quick decision right now on which one makes the most sense.\r\n\r\nRadBus is an open source project built by people participating in the Twin Cities open source community who rely on Metro Transit to get to and from work every day.  To see the source code behind this API and learn about contributing to the project, click the GitHub icon at the top of this page.  To see a working RadBus client, check out the [RadBus Web Client](https://www.radbus.io).\r\n\r\nThe following documentation can be used by developers to understand how to properly call the RadBus API.\r\n\r\n## Contents\r\n\r\n[Version 1 API](#version-1-api)\r\n* [Authentication](#authentication)\r\n  * [Creating an OAuth2 Token](#creating-an-oauth2-token)\r\n  * [Authentication Failure Responses](#authentication-failure-responses)\r\n* [Root Resource](#root-resource)\r\n  * [Fetch (GET /v1)](#fetch-get-v1)\r\n* [OAuth2 Resource](#oauth2-resource)\r\n  * [Fetch (GET /v1/oauth2)](#fetch-get-v1oauth2)\r\n* [Route List Resource](#route-list-resource)\r\n  * [Fetch (GET /v1/routes)](#fetch-get-v1routes)\r\n* [Route Details Resource](#route-details-resource)\r\n  * [Fetch (GET /v1/routes/:route)](#fetch-get-v1routesroute)\r\n* [Schedule Resource](#schedule-resource)\r\n  * [Fetch (GET /v1/schedule)](#fetch-get-v1schedule)\r\n  * [Add/Update Route (POST /v1/schedule/routes)](#addupdate-route-post-v1scheduleroutes)\r\n  * [Remove Route (DELETE /v1/schedule/routes/:route)](#remove-route-delete-v1scheduleroutesroute)\r\n* [Departures Resource](#departures-resource)\r\n  * [Fetch (GET /v1/departures)](#fetch-get-v1departures)\r\n\r\n## Version 1 API\r\n\r\n### Authentication\r\n\r\nMany RadBus API endpoints require requests to be authenticated since they need access to a user's personal schedule configuration.  Rather than store user credentials internally, RadBus uses [OAuth2 Authorization](http://tools.ietf.org/html/rfc6750) to identify the user and then is able to look up their RadBus data.\r\n\r\n#### Creating an OAuth2 Token\r\n\r\nTo use a request that requires authentication you must pass an [Authorization](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8) HTTP header with a `Bearer` token obtained by a supported OAuth2 provider.  Currently the RadBus API only supports OAuth2 tokens generated from Google ID's, which you can learn more about [here](https://developers.google.com/accounts/docs/OAuth2).\r\n\r\nWhen obtaining your OAuth2 token from Google, you will be required to provide three pieces of information that link the token to the RadBus API and the type of access the API requires on behalf of the user:\r\n\r\n* RadBus Web API's Google Client ID\r\n* RadBus Web API's Google Client Secret\r\n* OAuth2 Scopes value\r\n\r\nTo obtain these values, the client should call the [OAuth2](#oauth2-resource) resource.\r\n\r\n#### Authentication Failure Responses\r\n\r\nAny endpoint that requires authentication can produce the following errors:\r\n\r\n`401 Unauthorized`\r\n* No `Authorization` request header was passed.\r\n* The OAuth2 token in the `Authorization` request header was created using the wrong scopes value.  See the [Creating an OAuth2 Token](#creating-an-oauth2-token) section above for information on how to use the right scopes value.\r\n* The OAuth2 token in the `Authorization` request header has expired.  When this happens, the client should generate a new token and call the same RadBus API endpoint again.\r\n\r\n### Root Resource\r\n\r\nProvides description and version information about the v1 API.\r\n\r\n#### Fetch (GET /v1)\r\n\r\n##### Sample Request\r\n\r\n```\r\nGET https://api.radbus.io/v1\r\n```\r\n\r\n##### Sample Success Response\r\n\r\n`200 OK`\r\n```json\r\n{\r\n  \"service_name\": \"RadBus Web API\",\r\n  \"app_version\": \"0.1.0\",\r\n  \"api_version\": \"1.0.0\"\r\n}\r\n```\r\n\r\n### OAuth2 Resource\r\n\r\nOAuth2 information required by the Google API for clients to generate authorization tokens that can be used with the RadBus API.\r\n\r\n#### Fetch (GET /v1/oauth2)\r\n\r\n##### Sample Request\r\n\r\n```\r\nGET https://api.radbus.io/v1/oauth2\r\n```\r\n\r\n##### Sample Success Response\r\n\r\n`200 OK`\r\n```json\r\n{\r\n  \"client_id\": \"radbus-api-google-client-id\",\r\n  \"client_secret\": \"radbus-api-google-client-secret\",\r\n  \"scopes\": \"radbus-api-oauth2-scopes\"\r\n}\r\n```\r\n\r\n### Route List Resource\r\n\r\nA list of all available transit routes.\r\n\r\n#### Fetch (GET /v1/routes)\r\n\r\n##### Sample Request\r\n\r\n```\r\nGET https://api.radbus.io/v1/routes\r\n```\r\n\r\n##### Sample Success Response\r\n\r\n`200 OK`\r\n```json\r\n[\r\n  {\r\n    \"id\": \"4\",\r\n    \"description\": \"4 - New Brighton - Johnson St - Bryant Av - Southtown\"\r\n  },\r\n  ...\r\n]\r\n```\r\n\r\n### Route Details Resource\r\n\r\nTransit route details, including directions and stops.\r\n\r\n#### Fetch (GET /v1/routes/:route)\r\n\r\n##### Sample Request\r\n\r\n```\r\nGET https://api.radbus.io/v1/routes/4\r\n```\r\n\r\n##### Sample Success Response\r\n\r\n`200 OK`\r\n```json\r\n{\r\n  \"id\": \"4\",\r\n  \"description\": \"4 - New Brighton - Johnson St - Bryant Av - Southtown\",\r\n  \"directions\": [\r\n    {\r\n      \"id\": \"4\",\r\n      \"description\": \"Northbound\", \r\n      \"stops\": [\r\n        {\r\n          \"id\": \"82ST\", \r\n          \"description\": \"82nd St and I-35W\"\r\n        }, \r\n        ...\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"1\",\r\n      \"description\": \"Southbound\", \r\n      \"stops\": [\r\n        {\r\n          \"id\": \"O81A\", \r\n          \"description\": \"1st Ave NW and Old Hwy 8\"\r\n        }, \r\n        ...\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Schedule Resource\r\n\r\nA user's configured schedule in the RadBus system.\r\n\r\n#### Fetch (GET /v1/schedule)\r\n\r\n##### Sample Request\r\n\r\nRequires [Authentication](#authentication)\r\n\r\n```\r\nGET https://api.radbus.io/v1/schedule\r\nAuthorization: Bearer <oauth2-token>\r\n```\r\n\r\n##### Sample Success Response\r\n\r\nIf no schedule exists for the authenticated user, then a response is returned with no routes:\r\n\r\n`200 OK`\r\n```json\r\n{\r\n  \"user_display_name\": \"Joe User\",\r\n  \"routes:\": []\r\n}\r\n```\r\n\r\nOtherwise, a response is returned that contains routes:\r\n\r\n`200 OK`\r\n```json\r\n{\r\n  \"user_display_name\": \"Joe User\",\r\n  \"routes\": [\r\n    {\r\n      \"id\": \"4\",\r\n      \"description\": \"4 - New Brighton - Johnson St - Bryant Av - Southtown\",\r\n      \"am\": {\r\n        \"direction\": {\r\n          \"id\": \"1\",\r\n          \"description\": \"Southbound\"\r\n        },\r\n        \"stops\": [\r\n          {\r\n            \"id\": \"O81A\",\r\n            \"description\": \"1st Ave NW and Old Hwy 8\"\r\n          },\r\n          {\r\n            \"id\": \"SLVI\",\r\n            \"description\": \"Silver Lake Village\"\r\n          }\r\n        ]\r\n      },\r\n      \"pm\": {\r\n        \"direction\": {\r\n          \"id\": \"4\",\r\n          \"name\": \"Northbound\"\r\n        },\r\n        \"stops\": [\r\n          {\r\n            \"id\": \"7SNI\",\r\n            \"description\": \"Nicollet Mall and 7th St S\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSometimes configured schedule information gets outdated.  If a route, direction, or stop is no longer available, the schedule fetch call will return an additional attribute called `missing_data` which will set to `true`:\r\n\r\n```json\r\n{\r\n  \"user_display_name\": \"Joe User\",\r\n  \"missing_data\": true,\r\n  \"routes\": [\r\n    {\r\n      \"id\": \"4\",\r\n      \"description\": \"(unknown route)\",\r\n      ...\r\n    },\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\n#### Add/Update Route (POST /v1/schedule/routes)\r\n\r\nAdds or updates a single route to the authenticated user's schedule.\r\n\r\n##### Sample Request\r\n\r\nRequires [Authentication](#authentication)\r\n\r\n```\r\nPOST https://api.radbus.io/v1/schedule/routes\r\nAuthorization: Bearer <oauth2-token>\r\nContent-Type: application/json\r\n```\r\n\r\nThe request body needs to contain a route ID and both AM and PM sections, each with a direction and one or more stops:\r\n\r\n```json\r\n{\r\n  \"id\": \"4\",\r\n  \"am\": {\r\n    \"direction\": \"1\",\r\n    \"stops\": [\"O81A\", \"SLVI\", 15893]\r\n  },\r\n  \"pm\": {\r\n    \"direction\": \"4\",\r\n    \"stops\": [\"7SNI\"]\r\n  }\r\n}\r\n```\r\n\r\n###### Route ID's\r\n\r\nAllowable route ID's can be obtained via the [Route List Resource](#route-list-resource).\r\n\r\n###### Direction ID's\r\n\r\nAllowable direction ID's for a specific route can be obtained via the [Route Details Resource](#route-details-resource).\r\n\r\n###### Stop ID's\r\n\r\nAllowable stop ID's for a specific route can also be obtained via the [Route Details Resource](#route-details-resource).  However, the stop ID's returned by that resource don't cover *all* of the actual stops for each route, only the key stops listed for a given route in NexTrip.  This is due to a current limitation of the API since it's using NexTrip itself to get all route information.  This shortcoming will be resolved in the near future when the RadBus API starts using the [Transit Data API](http://transitdata.io) for route information instead of NexTrip (see the [Roadmap](https://github.com/TargetRAD/radbus-api/wiki/Roadmap#medium-term-3-6-months) for more information).\r\n\r\n**COMING SOON**:\r\n\r\n> The good news is the API will *also* accept actual Metro Transit Stop ID's, which do represent every stop in a route.  These stop ID's are the true identifier of a stop and are what Metro Transit uses in it's [GTFS feed](http://datafinder.org/metadata/transit_schedule_google_feed.html).  The API tells the difference by the JSON data type of the stop ID.  If you pass a string (example: `\"081A\"`) then the API will assume its a NexTrip stop code and will actually validate the code against the stops returned by the [Route Details Resource](#route-details-resource).  However, if you pass an integer (example: `15893`), the API will assume its a Metro Transit Stop ID and, since it currently has no mechanism to validate it, it will use it as is when getting departure times.\r\n\r\n> While the API has no programatic way today to present Metro Transit Stop ID's, end users can obtain them easily via the [Services Finder](http://www.metrotransit.org/planner/servicesfinder.aspx) and [Interactive Map](http://www.metrotransit.org/imap/map.aspx) web pages.\r\n\r\n##### Sample Success Responses\r\n\r\n`201 Created`: The route was new and was therefore added to the schedule.\r\n\r\n`204 No Content`: The route already existed and was therefore updated.\r\n\r\nCall [Fetch](#fetch-get-v1schedule) to see the updated schedule.\r\n\r\n##### Failure Responses\r\n\r\n`400 Bad Request`: The specified route data was invalid.  The response will contain specific validation error messages:\r\n\r\n```json\r\n{\r\n  \"code\": \"InvalidContentError\",\r\n  \"message\": \"The route ID 'foo' does not exist.\"\r\n}\r\n```\r\n\r\n#### Remove Route (DELETE /v1/schedule/routes/:route)\r\n\r\nRemoves an existing route from the authenticated user's schedule.\r\n\r\n##### Sample Request\r\n\r\nRequires [Authentication](#authentication)\r\n\r\n```\r\nDELETE https://api.radbus.io/v1/schedule/routes/4\r\nAuthorization: Bearer <oauth2-token>\r\n```\r\n\r\n##### Sample Success Response\r\n\r\n`204 No Content`\r\n\r\nCall [Fetch](#fetch-get-v1schedule) to see the updated schedule.\r\n\r\n##### Failure Responses\r\n\r\n`400 Bad Request`: The specified route did not exist within the schedule.\r\n\r\n### Departures Resource\r\n\r\nA list of upcoming transit departures based on the user's configured schedule.\r\n\r\n#### Fetch (GET /v1/departures)\r\n\r\n##### Sample Request\r\n\r\nRequires [Authentication](#authentication)\r\n\r\n```\r\nGET https://api.radbus.io/v1/departures\r\nAuthorization: Bearer <oauth2-token>\r\n```\r\n\r\n##### Query Parameters\r\n\r\n* `route` - only return departures for the specified route\r\n\r\n##### Sample Success Response\r\n\r\n`200 OK`\r\n```json\r\n[\r\n  {\r\n    \"time\": \"2014-05-14T14:27:00.863Z\",\r\n    \"route\": {\r\n      \"id\": \"270\",\r\n      \"terminal\": \"C\"\r\n    }, \r\n    \"stop\": {\r\n      \"id\": \"MPWD\",\r\n      \"description\": \"Maplewood Mall Transit Center\"\r\n    }\r\n  },\r\n  ...\r\n]\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}